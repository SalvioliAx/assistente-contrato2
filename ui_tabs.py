# ui_tabs.py
import streamlit as st
import pandas as pd
from llm_utils import * # Importa todas as fun√ß√µes
from langchain.chains import RetrievalQA
from langchain.prompts import PromptTemplate
from langchain_google_genai import ChatGoogleGenerativeAI

# --- AS ASSINATURAS DAS FUN√á√ïES FORAM SIMPLIFICADAS ---
# J√° n√£o precisam de receber 'api_key' como par√¢metro.

def render_chat_tab(vector_store, nomes_arquivos):
    st.header("üí¨ Converse com os seus documentos")
    # ... (c√≥digo inalterado)
    llm_chat = ChatGoogleGenerativeAI(model="gemini-1.5-flash-latest", temperature=0.2)
    # ... (c√≥digo inalterado)

def render_dashboard_tab(vector_store, nomes_arquivos):
    st.header("üìà An√°lise Comparativa de Dados Contratuais")
    if st.button("üöÄ Gerar Dados para o Dashboard", key="btn_dashboard", use_container_width=True):
        dados_extraidos = extrair_dados_dos_contratos(vector_store, nomes_arquivos)
        # ... (c√≥digo inalterado)

# ... e assim por diante para todas as outras fun√ß√µes.
# Apenas remova o par√¢metro 'api_key' das assinaturas das fun√ß√µes
# e das chamadas √†s fun√ß√µes do 'llm_utils'.

def render_resumo_tab(vector_store, nomes_arquivos):
    # ...
    resumo = gerar_resumo_executivo(texto_completo, arquivo_selecionado)
    # ...
    
# ... etc.
