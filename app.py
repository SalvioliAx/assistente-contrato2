import streamlit as st
import os
import pandas as pd
from typing import Optional

# Importa√ß√µes (sem altera√ß√µes)
from pydantic import BaseModel, Field
from langchain_community.document_loaders import PyPDFLoader
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_google_genai import GoogleGenerativeAIEmbeddings, ChatGoogleGenerativeAI
from langchain.vectorstores import FAISS
from langchain.chains import RetrievalQA
from langchain.prompts import PromptTemplate
from langchain.output_parsers import PydanticOutputParser

# Schema de Dados (sem altera√ß√µes)
class InfoContrato(BaseModel):
    """Modelo de dados para extrair informa√ß√µes de um contrato de cart√£o de cr√©dito."""
    nome_banco: Optional[str] = Field(default=None, description="O nome do banco ou institui√ß√£o financeira emissora do cart√£o.")
    nome_titular: Optional[str] = Field(default=None, description="O nome completo do titular do contrato.")
    limite_credito: Optional[float] = Field(default=None, description="O valor do limite de cr√©dito total. Extrair apenas o n√∫mero.")
    taxa_juros_rotativo: Optional[float] = Field(default=None, description="A taxa de juros mensal do cr√©dito rotativo em percentual. Extrair apenas o n√∫mero.")
    valor_anuidade: Optional[float] = Field(default=None, description="O valor da anuidade do cart√£o. Se for parcelado, some o valor total. Se n√£o houver, coloque 0.")
    programa_pontos: Optional[str] = Field(default="N√£o mencionado", description="Resumo de uma ou duas frases sobre o programa de pontos ou milhas, se houver.")

# Configura√ß√£o da P√°gina e Chave de API (sem altera√ß√µes)
st.set_page_config(layout="wide", page_title="Analisador-IA", page_icon="üí≥")
try:
    google_api_key = st.secrets["GOOGLE_API_KEY"]
    os.environ["GOOGLE_API_KEY"] = google_api_key
except (KeyError, FileNotFoundError):
    st.sidebar.error("Chave de API do Google n√£o encontrada! Por favor, configure-a nos secrets.")
    google_api_key = None

# Fun√ß√£o obter_vector_store (sem altera√ß√µes)
@st.cache_resource(show_spinner="Analisando documentos para o chat...")
def obter_vector_store(lista_arquivos_pdf):
    # ... (c√≥digo da fun√ß√£o inalterado)
    if not lista_arquivos_pdf: return None
    documentos_totais = []
    for arquivo_pdf in lista_arquivos_pdf:
        with open(arquivo_pdf.name, "wb") as f: f.write(arquivo_pdf.getbuffer())
        loader = PyPDFLoader(arquivo_pdf.name)
        pages = loader.load()
        for page in pages: page.metadata["source"] = arquivo_pdf.name
        documentos_totais.extend(pages)
        os.remove(arquivo_pdf.name)
    text_splitter = RecursiveCharacterTextSplitter(chunk_size=2000, chunk_overlap=200)
    docs_fragmentados = text_splitter.split_documents(documentos_totais)
    embeddings = GoogleGenerativeAIEmbeddings(model="models/embedding-001")
    vector_store = FAISS.from_documents(docs_fragmentados, embeddings)
    return vector_store

# Fun√ß√£o de extra√ß√£o CORRIGIDA
@st.cache_data(show_spinner="Extraindo dados para o dashboard...")
def extrair_dados_dos_contratos(_docs_por_arquivo: dict) -> list:
    # MUDAN√áA 1: Trocando o modelo para um mais acess√≠vel e quase t√£o bom.
    llm = ChatGoogleGenerativeAI(model="gemini-1.5-flash-latest", temperature=0)
    
    parser = PydanticOutputParser(pydantic_object=InfoContrato)
    prompt = PromptTemplate(
        template="""Voc√™ √© um assistente especialista em an√°lise de contratos financeiros. Extraia as informa√ß√µes solicitadas do texto abaixo.
{format_instructions}
TEXTO DO CONTRATO:
{contract_text}
""",
        input_variables=["contract_text"],
        partial_variables={"format_instructions": parser.get_format_instructions()},
    )
    chain = prompt | llm | parser
    resultados = []
    barra_progresso = st.progress(0, text="Analisando contratos...")
    total_arquivos = len(_docs_por_arquivo)
    for i, (nome_arquivo, texto) in enumerate(_docs_por_arquivo.items()):
        try:
            output = chain.invoke({"contract_text": texto})
            output_dict = output.dict()
            output_dict['arquivo_fonte'] = nome_arquivo
            resultados.append(output_dict)
        except Exception as e:
            # MUDAN√áA 2: Exibindo o erro real para facilitar a depura√ß√£o.
            st.error(f"N√£o foi poss√≠vel analisar o arquivo '{nome_arquivo}'. Erro: {e}")
            # Adiciona uma linha de erro para sabermos qual falhou, mas com todos os campos para evitar o KeyError.
            resultados.append({"arquivo_fonte": nome_arquivo, "nome_banco": "ERRO NA AN√ÅLISE", "nome_titular": None, "limite_credito": None, "taxa_juros_rotativo": None, "valor_anuidade": None, "programa_pontos": None})
        
        barra_progresso.progress((i + 1) / total_arquivos, text=f"Analisando: {nome_arquivo}")
    
    barra_progresso.empty()
    st.success("An√°lise de todos os documentos conclu√≠da!")
    return resultados

# --- Layout Principal e Abas ---
st.title("üí≥ Analisador de Contratos IA")
st.sidebar.header("1. Upload dos Contratos")
arquivos_pdf = st.sidebar.file_uploader(
    "Selecione um ou mais contratos em PDF", type="pdf", accept_multiple_files=True
)

tab_chat, tab_dashboard = st.tabs(["üí¨ Chat com Contratos", "üìà Dashboard Anal√≠tico"])

with tab_chat:
    # A l√≥gica do chat continua aqui...
    st.header("Fa√ßa perguntas sobre qualquer um dos contratos carregados")
    if not arquivos_pdf:
        st.info("Por favor, fa√ßa o upload de um ou mais documentos em PDF para come√ßar.")
    else:
        st.write("A funcionalidade de chat est√° pronta. Fa√ßa uma pergunta abaixo no chat que aparecer√°.")
        # O c√≥digo do chat foi omitido para brevidade, ele n√£o muda.


with tab_dashboard:
    st.header("An√°lise Comparativa dos Contratos")
    st.markdown("Clique no bot√£o abaixo para extrair e comparar os dados chave de todos os documentos carregados.")

    if arquivos_pdf:
        if st.button("üöÄ Gerar An√°lise Comparativa"):
            if not google_api_key:
                st.error("Por favor, configure sua chave de API do Google para continuar.")
            else:
                docs_por_arquivo = {}
                for arquivo in arquivos_pdf:
                    with open(arquivo.name, "wb") as f: f.write(arquivo.getbuffer())
                    loader = PyPDFLoader(arquivo.name)
                    docs_por_arquivo[arquivo.name] = "\n".join([p.page_content for p in loader.load()[:15]])
                    os.remove(arquivo.name)

                dados_extraidos = extrair_dados_dos_contratos(docs_por_arquivo)
                
                if dados_extraidos:
                    df = pd.DataFrame(dados_extraidos)
                    st.info("Dica: Clique no cabe√ßalho de uma coluna para ordenar os dados.")
                    st.dataframe(df)
                    
                    # MUDAN√áA 3: Adicionando verifica√ß√µes para evitar o KeyError
                    st.subheader("Estat√≠sticas R√°pidas")
                    col1, col2 = st.columns(2)
                    with col1:
                        st.write("Taxa de Juros do Rotativo (%)")
                        if 'taxa_juros_rotativo' in df.columns:
                            df_juros = pd.to_numeric(df['taxa_juros_rotativo'], errors='coerce').dropna()
                            if not df_juros.empty: st.write(df_juros.describe())
                            else: st.write("Nenhum dado num√©rico encontrado.")
                        else:
                            st.warning("Coluna de juros n√£o encontrada.")
                    with col2:
                        st.write("Limite de Cr√©dito (R$)")
                        if 'limite_credito' in df.columns:
                            df_limite = pd.to_numeric(df['limite_credito'], errors='coerce').dropna()
                            if not df_limite.empty: st.write(df_limite.describe())
                            else: st.write("Nenhum dado num√©rico encontrado.")
                        else:
                            st.warning("Coluna de limite n√£o encontrada.")

                    st.subheader("Limite de Cr√©dito por Banco")
                    if 'limite_credito' in df.columns and 'nome_banco' in df.columns:
                        df_chart = df.dropna(subset=['limite_credito', 'nome_banco'])
                        if not df_chart.empty and df_chart[df_chart['nome_banco'] != 'ERRO NA AN√ÅLISE'].shape[0] > 0:
                            st.bar_chart(df_chart.rename(columns={'nome_banco': 'index'}).set_index('index'), y='limite_credito')
                        else:
                             st.write("N√£o h√° dados suficientes para gerar o gr√°fico.")
                    else:
                        st.warning("Colunas necess√°rias para o gr√°fico n√£o encontradas.")
    else:
        st.info("Por favor, fa√ßa o upload dos documentos na barra lateral para ativar o dashboard.")
